{"version":3,"file":"index.js","sources":["../src/constants.ts","../src/types.ts","../src/util.ts","../src/parser.ts","../src/ftd.ts"],"sourcesContent":["export const ROOT_NODE = '#root';\n\nexport const CONTAINER_NODES = ['ftd.column', 'ftd.row', 'ftd.container', 'ftd.component'];\n\nexport const COMMENT_BEGIN = ';;';","import { ROOT_NODE } from './constants';\n\nexport type FTDNodeType = FTDNode | FTDContainerNode;\n\ntype FTDParamType = string | FTDInlineParam | FTDParam;\n\nexport class FTDInlineParam {\n    public value: string\n\n    constructor(value: string) {\n        this.value = value;\n    }\n}\n\nexport class FTDParam {\n    public key: string\n    public value: string\n\n    constructor(key: string, value: string) {\n        this.key = key;\n        this.value = value;\n    }\n}\n\nexport class FTDImportStmt {\n    public resource: string\n    public alias: string|null\n\n    constructor(resource: string, alias: string|null = null) {\n        this.resource = resource;\n        this.alias = alias;\n    }\n}\n\nexport class FTDNode {\n    public type: string\n    public isRootNode: boolean = false\n    public isContainerNode: boolean = false\n    public hasChildNodes: boolean = false\n    public params: FTDParamType[]\n    public children: FTDNodeType[] = []\n    public parent: FTDNode|null\n    \n    constructor(type: string, params: string, parent: FTDNode|null) {\n        this.type = type;\n        this.parent = parent;\n        this.params = params ? [new FTDInlineParam(params)] : [];\n    }\n}\n\nexport class FTDRootNode extends FTDNode {\n    importStatements: FTDImportStmt[] = []\n\n    constructor() {\n        super(ROOT_NODE, null, null);\n        this.isRootNode = true;\n    }\n}\n\nexport class FTDContainerNode extends FTDNode {\n    constructor(type: string, params: string, parent: FTDNode) {\n        super(type, params, parent);\n\n        this.isContainerNode = true;\n    }\n}","import { COMMENT_BEGIN } from \"./constants\";\nimport { FTDNodeType, FTDRootNode } from './types';\n\nexport const removeInlineComments = (v: string) => {\n    let index = v.indexOf(COMMENT_BEGIN);\n\n    let output = v;\n\n    while(index > 0) {\n        const escaped = v[index - 1] === '\\\\';\n\n        if(escaped) {\n            index = v.indexOf(COMMENT_BEGIN, index + 1);\n        } else {\n            output = v.slice(0, index).trim();\n            break;\n        }\n    }\n\n    return output;\n};\n\nexport const extractTypeAndParams = (line: string) => {\n    const trimmed = line.substring(2).trimStart();\n    const index = trimmed.indexOf(':');\n\n    const type = trimmed.slice(0, index).trim();\n    const params = removeInlineComments(trimmed.slice(index + 1).trim());\n\n    return [type, params];\n};\n\nexport const isFTDComponent = (v: string) => v.split('.')[0] === 'ftd';\n\nexport const shouldEndNode = (node: FTDRootNode | FTDNodeType, endingBlock: string) => {\n    if(node.isRootNode) {\n        return true;\n    }\n\n    return node.type === endingBlock;\n};","import { FTDContainerNode, FTDImportStmt, FTDNode, FTDParam, FTDRootNode } from \"./types\";\nimport { extractTypeAndParams, removeInlineComments, shouldEndNode } from \"./util\";\n\nimport { CONTAINER_NODES } from \"./constants.js\";\n\nexport const parser = (code: string) => {\n    const lines = code.split(/\\n/);\n\n    const rootNode = new FTDRootNode();\n\n    let node: FTDNode | FTDRootNode = rootNode;\n\n    const len = lines.length;\n\n    let i = 0;\n\n    while(i < len) {\n        const line = lines[i].trimStart();\n\n        if(line.startsWith(';;')) {\n            // do nothing\n        } else if(line.startsWith('--')) {\n            const [type, param] = extractTypeAndParams(line);\n\n            if(type === 'import') {\n                const parts = param.split(/\\s+/);\n\n                let aliasIndex = parts.indexOf('as');\n\n                if(aliasIndex === 0) {\n                    throw new Error(\n                        `FTD Parsing Error: Missing resource path in import statement.\\n\\n` +\n                        `This error occured at Line: ${i}'`\n                    );\n                }\n\n                const resource = parts[0];\n\n                const alias = aliasIndex > 0 ? parts[aliasIndex + 1] : null;\n\n                const stmt = new FTDImportStmt(resource, alias);\n\n                rootNode.importStatements.push(stmt);\n            } else if(type === 'end') {\n                if(!node.isContainerNode && !node.isRootNode) {\n                    node = node.parent;\n                }\n\n                if(shouldEndNode(node, param)) {\n                    node = node.parent;\n                } else {\n                    throw new Error(\n                        `FTD Parsing Error: ${node.type} is a container node and should be closed.\\n\\n` +\n                        `You are missing '-- end: ${node.type}'`\n                    );\n                }\n            } else {\n                if(!node.isContainerNode && !node.isRootNode) {\n                    node = node.parent;\n                }\n\n                if(CONTAINER_NODES.includes(type)) {\n                    const child = new FTDContainerNode(type, param, node);\n\n                    node.children.push(child);\n\n                    node.hasChildNodes = true;\n                    \n                    node = child;\n                } else {\n                    const child = new FTDNode(type, param, node);\n\n                    node.children.push(child);\n\n                    node = child;\n                }\n            }\n        } else if(!node.hasChildNodes && !node.isRootNode) {\n            if(line) {\n                const index = line.indexOf(':');\n    \n                if(index > 0 && line[index - 1] !== '\\\\') {\n                    const key = line.slice(0, index).trim();\n                    const value = removeInlineComments(line.slice(index + 1).trim());\n\n                    node.params.push(new FTDParam(key, value));\n                } else {\n                    node.params.push(removeInlineComments(line));\n                }\n            }\n        }\n\n        i++;\n    }\n\n    if(node !== rootNode) {\n        node = rootNode;\n    }\n\n    return node;\n};","import { parser } from \"./parser.js\";\n\nexport const ftd = (strings: string[], ...values: string[]) => {\n    const code = values\n        .reduce((output, value, index) => `${output}${value}${strings[index + 1]}`, strings[0]);\n\n    const tree = parser(code);\n\n    return tree;\n};"],"names":[],"mappings":"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"}